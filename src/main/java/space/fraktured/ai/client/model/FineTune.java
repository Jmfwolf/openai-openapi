/*
 * OpenAI API
 * The OpenAI REST API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package space.fraktured.ai.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import space.fraktured.ai.client.model.FineTuneEvent;
import space.fraktured.ai.client.model.OpenAIFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import space.fraktured.ai.client.JSON;

/**
 * FineTune
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-27T16:51:01.357479157-07:00[America/Los_Angeles]")
public class FineTune {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Integer createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Integer updatedAt;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_FINE_TUNED_MODEL = "fine_tuned_model";
  @SerializedName(SERIALIZED_NAME_FINE_TUNED_MODEL)
  private String fineTunedModel;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organization_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_HYPERPARAMS = "hyperparams";
  @SerializedName(SERIALIZED_NAME_HYPERPARAMS)
  private Object hyperparams;

  public static final String SERIALIZED_NAME_TRAINING_FILES = "training_files";
  @SerializedName(SERIALIZED_NAME_TRAINING_FILES)
  private List<OpenAIFile> trainingFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALIDATION_FILES = "validation_files";
  @SerializedName(SERIALIZED_NAME_VALIDATION_FILES)
  private List<OpenAIFile> validationFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT_FILES = "result_files";
  @SerializedName(SERIALIZED_NAME_RESULT_FILES)
  private List<OpenAIFile> resultFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<FineTuneEvent> events = new ArrayList<>();

  public FineTune() {
  }

  public FineTune id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public FineTune _object(String _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    this._object = _object;
  }


  public FineTune createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public Integer getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public FineTune updatedAt(Integer updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public Integer getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(Integer updatedAt) {
    this.updatedAt = updatedAt;
  }


  public FineTune model(String model) {
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nonnull

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    this.model = model;
  }


  public FineTune fineTunedModel(String fineTunedModel) {
    
    this.fineTunedModel = fineTunedModel;
    return this;
  }

   /**
   * Get fineTunedModel
   * @return fineTunedModel
  **/
  @javax.annotation.Nullable

  public String getFineTunedModel() {
    return fineTunedModel;
  }


  public void setFineTunedModel(String fineTunedModel) {
    this.fineTunedModel = fineTunedModel;
  }


  public FineTune organizationId(String organizationId) {
    
    this.organizationId = organizationId;
    return this;
  }

   /**
   * Get organizationId
   * @return organizationId
  **/
  @javax.annotation.Nonnull

  public String getOrganizationId() {
    return organizationId;
  }


  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }


  public FineTune status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public FineTune hyperparams(Object hyperparams) {
    
    this.hyperparams = hyperparams;
    return this;
  }

   /**
   * Get hyperparams
   * @return hyperparams
  **/
  @javax.annotation.Nonnull

  public Object getHyperparams() {
    return hyperparams;
  }


  public void setHyperparams(Object hyperparams) {
    this.hyperparams = hyperparams;
  }


  public FineTune trainingFiles(List<OpenAIFile> trainingFiles) {
    
    this.trainingFiles = trainingFiles;
    return this;
  }

  public FineTune addTrainingFilesItem(OpenAIFile trainingFilesItem) {
    this.trainingFiles.add(trainingFilesItem);
    return this;
  }

   /**
   * Get trainingFiles
   * @return trainingFiles
  **/
  @javax.annotation.Nonnull

  public List<OpenAIFile> getTrainingFiles() {
    return trainingFiles;
  }


  public void setTrainingFiles(List<OpenAIFile> trainingFiles) {
    this.trainingFiles = trainingFiles;
  }


  public FineTune validationFiles(List<OpenAIFile> validationFiles) {
    
    this.validationFiles = validationFiles;
    return this;
  }

  public FineTune addValidationFilesItem(OpenAIFile validationFilesItem) {
    this.validationFiles.add(validationFilesItem);
    return this;
  }

   /**
   * Get validationFiles
   * @return validationFiles
  **/
  @javax.annotation.Nonnull

  public List<OpenAIFile> getValidationFiles() {
    return validationFiles;
  }


  public void setValidationFiles(List<OpenAIFile> validationFiles) {
    this.validationFiles = validationFiles;
  }


  public FineTune resultFiles(List<OpenAIFile> resultFiles) {
    
    this.resultFiles = resultFiles;
    return this;
  }

  public FineTune addResultFilesItem(OpenAIFile resultFilesItem) {
    this.resultFiles.add(resultFilesItem);
    return this;
  }

   /**
   * Get resultFiles
   * @return resultFiles
  **/
  @javax.annotation.Nonnull

  public List<OpenAIFile> getResultFiles() {
    return resultFiles;
  }


  public void setResultFiles(List<OpenAIFile> resultFiles) {
    this.resultFiles = resultFiles;
  }


  public FineTune events(List<FineTuneEvent> events) {
    
    this.events = events;
    return this;
  }

  public FineTune addEventsItem(FineTuneEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable

  public List<FineTuneEvent> getEvents() {
    return events;
  }


  public void setEvents(List<FineTuneEvent> events) {
    this.events = events;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FineTune fineTune = (FineTune) o;
    return Objects.equals(this.id, fineTune.id) &&
        Objects.equals(this._object, fineTune._object) &&
        Objects.equals(this.createdAt, fineTune.createdAt) &&
        Objects.equals(this.updatedAt, fineTune.updatedAt) &&
        Objects.equals(this.model, fineTune.model) &&
        Objects.equals(this.fineTunedModel, fineTune.fineTunedModel) &&
        Objects.equals(this.organizationId, fineTune.organizationId) &&
        Objects.equals(this.status, fineTune.status) &&
        Objects.equals(this.hyperparams, fineTune.hyperparams) &&
        Objects.equals(this.trainingFiles, fineTune.trainingFiles) &&
        Objects.equals(this.validationFiles, fineTune.validationFiles) &&
        Objects.equals(this.resultFiles, fineTune.resultFiles) &&
        Objects.equals(this.events, fineTune.events);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, _object, createdAt, updatedAt, model, fineTunedModel, organizationId, status, hyperparams, trainingFiles, validationFiles, resultFiles, events);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FineTune {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    fineTunedModel: ").append(toIndentedString(fineTunedModel)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hyperparams: ").append(toIndentedString(hyperparams)).append("\n");
    sb.append("    trainingFiles: ").append(toIndentedString(trainingFiles)).append("\n");
    sb.append("    validationFiles: ").append(toIndentedString(validationFiles)).append("\n");
    sb.append("    resultFiles: ").append(toIndentedString(resultFiles)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("object");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("model");
    openapiFields.add("fine_tuned_model");
    openapiFields.add("organization_id");
    openapiFields.add("status");
    openapiFields.add("hyperparams");
    openapiFields.add("training_files");
    openapiFields.add("validation_files");
    openapiFields.add("result_files");
    openapiFields.add("events");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("fine_tuned_model");
    openapiRequiredFields.add("organization_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("hyperparams");
    openapiRequiredFields.add("training_files");
    openapiRequiredFields.add("validation_files");
    openapiRequiredFields.add("result_files");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FineTune
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FineTune.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FineTune is not found in the empty JSON string", FineTune.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FineTune.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FineTune` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FineTune.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if (!jsonObj.get("fine_tuned_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fine_tuned_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fine_tuned_model").toString()));
      }
      if (!jsonObj.get("organization_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("training_files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `training_files` to be an array in the JSON string but got `%s`", jsonObj.get("training_files").toString()));
      }

      JsonArray jsonArraytrainingFiles = jsonObj.getAsJsonArray("training_files");
      // validate the required field `training_files` (array)
      for (int i = 0; i < jsonArraytrainingFiles.size(); i++) {
        OpenAIFile.validateJsonObject(jsonArraytrainingFiles.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("validation_files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validation_files` to be an array in the JSON string but got `%s`", jsonObj.get("validation_files").toString()));
      }

      JsonArray jsonArrayvalidationFiles = jsonObj.getAsJsonArray("validation_files");
      // validate the required field `validation_files` (array)
      for (int i = 0; i < jsonArrayvalidationFiles.size(); i++) {
        OpenAIFile.validateJsonObject(jsonArrayvalidationFiles.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("result_files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `result_files` to be an array in the JSON string but got `%s`", jsonObj.get("result_files").toString()));
      }

      JsonArray jsonArrayresultFiles = jsonObj.getAsJsonArray("result_files");
      // validate the required field `result_files` (array)
      for (int i = 0; i < jsonArrayresultFiles.size(); i++) {
        OpenAIFile.validateJsonObject(jsonArrayresultFiles.get(i).getAsJsonObject());
      };
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            FineTuneEvent.validateJsonObject(jsonArrayevents.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FineTune.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FineTune' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FineTune> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FineTune.class));

       return (TypeAdapter<T>) new TypeAdapter<FineTune>() {
           @Override
           public void write(JsonWriter out, FineTune value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FineTune read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FineTune given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FineTune
  * @throws IOException if the JSON string is invalid with respect to FineTune
  */
  public static FineTune fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FineTune.class);
  }

 /**
  * Convert an instance of FineTune to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

