/*
 * OpenAI API
 * The OpenAI REST API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package space.fraktured.ai.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import space.fraktured.ai.client.model.CreateAnswerResponseSelectedDocumentsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import space.fraktured.ai.client.JSON;

/**
 * CreateAnswerResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-27T16:09:35.007070044-07:00[America/Los_Angeles]")
public class CreateAnswerResponse {
  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_SEARCH_MODEL = "search_model";
  @SerializedName(SERIALIZED_NAME_SEARCH_MODEL)
  private String searchModel;

  public static final String SERIALIZED_NAME_COMPLETION = "completion";
  @SerializedName(SERIALIZED_NAME_COMPLETION)
  private String completion;

  public static final String SERIALIZED_NAME_ANSWERS = "answers";
  @SerializedName(SERIALIZED_NAME_ANSWERS)
  private List<String> answers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED_DOCUMENTS = "selected_documents";
  @SerializedName(SERIALIZED_NAME_SELECTED_DOCUMENTS)
  private List<CreateAnswerResponseSelectedDocumentsInner> selectedDocuments = new ArrayList<>();

  public CreateAnswerResponse() {
  }

  public CreateAnswerResponse _object(String _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nullable

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    this._object = _object;
  }


  public CreateAnswerResponse model(String model) {
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    this.model = model;
  }


  public CreateAnswerResponse searchModel(String searchModel) {
    
    this.searchModel = searchModel;
    return this;
  }

   /**
   * Get searchModel
   * @return searchModel
  **/
  @javax.annotation.Nullable

  public String getSearchModel() {
    return searchModel;
  }


  public void setSearchModel(String searchModel) {
    this.searchModel = searchModel;
  }


  public CreateAnswerResponse completion(String completion) {
    
    this.completion = completion;
    return this;
  }

   /**
   * Get completion
   * @return completion
  **/
  @javax.annotation.Nullable

  public String getCompletion() {
    return completion;
  }


  public void setCompletion(String completion) {
    this.completion = completion;
  }


  public CreateAnswerResponse answers(List<String> answers) {
    
    this.answers = answers;
    return this;
  }

  public CreateAnswerResponse addAnswersItem(String answersItem) {
    if (this.answers == null) {
      this.answers = new ArrayList<>();
    }
    this.answers.add(answersItem);
    return this;
  }

   /**
   * Get answers
   * @return answers
  **/
  @javax.annotation.Nullable

  public List<String> getAnswers() {
    return answers;
  }


  public void setAnswers(List<String> answers) {
    this.answers = answers;
  }


  public CreateAnswerResponse selectedDocuments(List<CreateAnswerResponseSelectedDocumentsInner> selectedDocuments) {
    
    this.selectedDocuments = selectedDocuments;
    return this;
  }

  public CreateAnswerResponse addSelectedDocumentsItem(CreateAnswerResponseSelectedDocumentsInner selectedDocumentsItem) {
    if (this.selectedDocuments == null) {
      this.selectedDocuments = new ArrayList<>();
    }
    this.selectedDocuments.add(selectedDocumentsItem);
    return this;
  }

   /**
   * Get selectedDocuments
   * @return selectedDocuments
  **/
  @javax.annotation.Nullable

  public List<CreateAnswerResponseSelectedDocumentsInner> getSelectedDocuments() {
    return selectedDocuments;
  }


  public void setSelectedDocuments(List<CreateAnswerResponseSelectedDocumentsInner> selectedDocuments) {
    this.selectedDocuments = selectedDocuments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnswerResponse createAnswerResponse = (CreateAnswerResponse) o;
    return Objects.equals(this._object, createAnswerResponse._object) &&
        Objects.equals(this.model, createAnswerResponse.model) &&
        Objects.equals(this.searchModel, createAnswerResponse.searchModel) &&
        Objects.equals(this.completion, createAnswerResponse.completion) &&
        Objects.equals(this.answers, createAnswerResponse.answers) &&
        Objects.equals(this.selectedDocuments, createAnswerResponse.selectedDocuments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_object, model, searchModel, completion, answers, selectedDocuments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnswerResponse {\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    searchModel: ").append(toIndentedString(searchModel)).append("\n");
    sb.append("    completion: ").append(toIndentedString(completion)).append("\n");
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    selectedDocuments: ").append(toIndentedString(selectedDocuments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("object");
    openapiFields.add("model");
    openapiFields.add("search_model");
    openapiFields.add("completion");
    openapiFields.add("answers");
    openapiFields.add("selected_documents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateAnswerResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateAnswerResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnswerResponse is not found in the empty JSON string", CreateAnswerResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateAnswerResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnswerResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("search_model") != null && !jsonObj.get("search_model").isJsonNull()) && !jsonObj.get("search_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_model").toString()));
      }
      if ((jsonObj.get("completion") != null && !jsonObj.get("completion").isJsonNull()) && !jsonObj.get("completion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completion").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("answers") != null && !jsonObj.get("answers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `answers` to be an array in the JSON string but got `%s`", jsonObj.get("answers").toString()));
      }
      if (jsonObj.get("selected_documents") != null && !jsonObj.get("selected_documents").isJsonNull()) {
        JsonArray jsonArrayselectedDocuments = jsonObj.getAsJsonArray("selected_documents");
        if (jsonArrayselectedDocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selected_documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selected_documents` to be an array in the JSON string but got `%s`", jsonObj.get("selected_documents").toString()));
          }

          // validate the optional field `selected_documents` (array)
          for (int i = 0; i < jsonArrayselectedDocuments.size(); i++) {
            CreateAnswerResponseSelectedDocumentsInner.validateJsonObject(jsonArrayselectedDocuments.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnswerResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnswerResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnswerResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnswerResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnswerResponse>() {
           @Override
           public void write(JsonWriter out, CreateAnswerResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnswerResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateAnswerResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateAnswerResponse
  * @throws IOException if the JSON string is invalid with respect to CreateAnswerResponse
  */
  public static CreateAnswerResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnswerResponse.class);
  }

 /**
  * Convert an instance of CreateAnswerResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

