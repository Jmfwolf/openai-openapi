/*
 * OpenAI API
 * The OpenAI REST API
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package space.fraktured.ai.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import space.fraktured.ai.client.JSON;

/**
 * CreateClassificationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-27T16:09:35.007070044-07:00[America/Los_Angeles]")
public class CreateClassificationRequest {
  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_EXAMPLES = "examples";
  @SerializedName(SERIALIZED_NAME_EXAMPLES)
  private List<List<String>> examples;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String _file;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels;

  public static final String SERIALIZED_NAME_SEARCH_MODEL = "search_model";
  @SerializedName(SERIALIZED_NAME_SEARCH_MODEL)
  private String searchModel = "ada";

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private BigDecimal temperature = new BigDecimal("0");

  public static final String SERIALIZED_NAME_LOGPROBS = "logprobs";
  @SerializedName(SERIALIZED_NAME_LOGPROBS)
  private Integer logprobs;

  public static final String SERIALIZED_NAME_MAX_EXAMPLES = "max_examples";
  @SerializedName(SERIALIZED_NAME_MAX_EXAMPLES)
  private Integer maxExamples = 200;

  public static final String SERIALIZED_NAME_LOGIT_BIAS = "logit_bias";
  @SerializedName(SERIALIZED_NAME_LOGIT_BIAS)
  private Object logitBias;

  public static final String SERIALIZED_NAME_RETURN_PROMPT = "return_prompt";
  @SerializedName(SERIALIZED_NAME_RETURN_PROMPT)
  private Boolean returnPrompt = false;

  public static final String SERIALIZED_NAME_RETURN_METADATA = "return_metadata";
  @SerializedName(SERIALIZED_NAME_RETURN_METADATA)
  private Boolean returnMetadata = false;

  public static final String SERIALIZED_NAME_EXPAND = "expand";
  @SerializedName(SERIALIZED_NAME_EXPAND)
  private List<Object> expand = null;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public CreateClassificationRequest() {
  }

  public CreateClassificationRequest model(String model) {
    
    this.model = model;
    return this;
  }

   /**
   * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
   * @return model
  **/
  @javax.annotation.Nonnull

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    this.model = model;
  }


  public CreateClassificationRequest query(String query) {
    
    this.query = query;
    return this;
  }

   /**
   * Query to be classified.
   * @return query
  **/
  @javax.annotation.Nonnull

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    this.query = query;
  }


  public CreateClassificationRequest examples(List<List<String>> examples) {
    
    this.examples = examples;
    return this;
  }

  public CreateClassificationRequest addExamplesItem(List<String> examplesItem) {
    this.examples.add(examplesItem);
    return this;
  }

   /**
   * A list of examples with labels, in the following format:  &#x60;[[\&quot;The movie is so interesting.\&quot;, \&quot;Positive\&quot;], [\&quot;It is quite boring.\&quot;, \&quot;Negative\&quot;], ...]&#x60;  All the label strings will be normalized to be capitalized.  You should specify either &#x60;examples&#x60; or &#x60;file&#x60;, but not both. 
   * @return examples
  **/
  @javax.annotation.Nullable

  public List<List<String>> getExamples() {
    return examples;
  }


  public void setExamples(List<List<String>> examples) {
    this.examples = examples;
  }


  public CreateClassificationRequest _file(String _file) {
    
    this._file = _file;
    return this;
  }

   /**
   * The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.  You should specify either &#x60;examples&#x60; or &#x60;file&#x60;, but not both. 
   * @return _file
  **/
  @javax.annotation.Nullable

  public String getFile() {
    return _file;
  }


  public void setFile(String _file) {
    this._file = _file;
  }


  public CreateClassificationRequest labels(List<String> labels) {
    
    this.labels = labels;
    return this;
  }

  public CreateClassificationRequest addLabelsItem(String labelsItem) {
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
   * @return labels
  **/
  @javax.annotation.Nullable

  public List<String> getLabels() {
    return labels;
  }


  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public CreateClassificationRequest searchModel(String searchModel) {
    
    this.searchModel = searchModel;
    return this;
  }

   /**
   * ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.
   * @return searchModel
  **/
  @javax.annotation.Nullable

  public String getSearchModel() {
    return searchModel;
  }


  public void setSearchModel(String searchModel) {
    this.searchModel = searchModel;
  }


  public CreateClassificationRequest temperature(BigDecimal temperature) {
    
    this.temperature = temperature;
    return this;
  }

   /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   * minimum: 0
   * maximum: 2
   * @return temperature
  **/
  @javax.annotation.Nullable

  public BigDecimal getTemperature() {
    return temperature;
  }


  public void setTemperature(BigDecimal temperature) {
    this.temperature = temperature;
  }


  public CreateClassificationRequest logprobs(Integer logprobs) {
    
    this.logprobs = logprobs;
    return this;
  }

   /**
   * Include the log probabilities on the &#x60;logprobs&#x60; most likely tokens, as well the chosen tokens. For example, if &#x60;logprobs&#x60; is 5, the API will return a list of the 5 most likely tokens. The API will always return the &#x60;logprob&#x60; of the sampled token, so there may be up to &#x60;logprobs+1&#x60; elements in the response.  The maximum value for &#x60;logprobs&#x60; is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.  When &#x60;logprobs&#x60; is set, &#x60;completion&#x60; will be automatically added into &#x60;expand&#x60; to get the logprobs. 
   * minimum: 0
   * maximum: 5
   * @return logprobs
  **/
  @javax.annotation.Nullable

  public Integer getLogprobs() {
    return logprobs;
  }


  public void setLogprobs(Integer logprobs) {
    this.logprobs = logprobs;
  }


  public CreateClassificationRequest maxExamples(Integer maxExamples) {
    
    this.maxExamples = maxExamples;
    return this;
  }

   /**
   * The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using &#x60;file&#x60;. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
   * @return maxExamples
  **/
  @javax.annotation.Nullable

  public Integer getMaxExamples() {
    return maxExamples;
  }


  public void setMaxExamples(Integer maxExamples) {
    this.maxExamples = maxExamples;
  }


  public CreateClassificationRequest logitBias(Object logitBias) {
    
    this.logitBias = logitBias;
    return this;
  }

   /**
   * Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view&#x3D;bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass &#x60;{\&quot;50256\&quot;: -100}&#x60; to prevent the &lt;|endoftext|&gt; token from being generated. 
   * @return logitBias
  **/
  @javax.annotation.Nullable

  public Object getLogitBias() {
    return logitBias;
  }


  public void setLogitBias(Object logitBias) {
    this.logitBias = logitBias;
  }


  public CreateClassificationRequest returnPrompt(Boolean returnPrompt) {
    
    this.returnPrompt = returnPrompt;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, the returned JSON will include a \&quot;prompt\&quot; field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
   * @return returnPrompt
  **/
  @javax.annotation.Nullable

  public Boolean getReturnPrompt() {
    return returnPrompt;
  }


  public void setReturnPrompt(Boolean returnPrompt) {
    this.returnPrompt = returnPrompt;
  }


  public CreateClassificationRequest returnMetadata(Boolean returnMetadata) {
    
    this.returnMetadata = returnMetadata;
    return this;
  }

   /**
   * A special boolean flag for showing metadata. If set to &#x60;true&#x60;, each document entry in the returned JSON will contain a \&quot;metadata\&quot; field.  This flag only takes effect when &#x60;file&#x60; is set. 
   * @return returnMetadata
  **/
  @javax.annotation.Nullable

  public Boolean getReturnMetadata() {
    return returnMetadata;
  }


  public void setReturnMetadata(Boolean returnMetadata) {
    this.returnMetadata = returnMetadata;
  }


  public CreateClassificationRequest expand(List<Object> expand) {
    
    this.expand = expand;
    return this;
  }

  public CreateClassificationRequest addExpandItem(Object expandItem) {
    if (this.expand == null) {
      this.expand = null;
    }
    this.expand.add(expandItem);
    return this;
  }

   /**
   * If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support &#x60;completion&#x60; and &#x60;file&#x60; objects for expansion.
   * @return expand
  **/
  @javax.annotation.Nullable

  public List<Object> getExpand() {
    return expand;
  }


  public void setExpand(List<Object> expand) {
    this.expand = expand;
  }


  public CreateClassificationRequest user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   * @return user
  **/
  @javax.annotation.Nullable

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateClassificationRequest createClassificationRequest = (CreateClassificationRequest) o;
    return Objects.equals(this.model, createClassificationRequest.model) &&
        Objects.equals(this.query, createClassificationRequest.query) &&
        Objects.equals(this.examples, createClassificationRequest.examples) &&
        Objects.equals(this._file, createClassificationRequest._file) &&
        Objects.equals(this.labels, createClassificationRequest.labels) &&
        Objects.equals(this.searchModel, createClassificationRequest.searchModel) &&
        Objects.equals(this.temperature, createClassificationRequest.temperature) &&
        Objects.equals(this.logprobs, createClassificationRequest.logprobs) &&
        Objects.equals(this.maxExamples, createClassificationRequest.maxExamples) &&
        Objects.equals(this.logitBias, createClassificationRequest.logitBias) &&
        Objects.equals(this.returnPrompt, createClassificationRequest.returnPrompt) &&
        Objects.equals(this.returnMetadata, createClassificationRequest.returnMetadata) &&
        Objects.equals(this.expand, createClassificationRequest.expand) &&
        Objects.equals(this.user, createClassificationRequest.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, query, examples, _file, labels, searchModel, temperature, logprobs, maxExamples, logitBias, returnPrompt, returnMetadata, expand, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateClassificationRequest {\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    examples: ").append(toIndentedString(examples)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    searchModel: ").append(toIndentedString(searchModel)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    logprobs: ").append(toIndentedString(logprobs)).append("\n");
    sb.append("    maxExamples: ").append(toIndentedString(maxExamples)).append("\n");
    sb.append("    logitBias: ").append(toIndentedString(logitBias)).append("\n");
    sb.append("    returnPrompt: ").append(toIndentedString(returnPrompt)).append("\n");
    sb.append("    returnMetadata: ").append(toIndentedString(returnMetadata)).append("\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("model");
    openapiFields.add("query");
    openapiFields.add("examples");
    openapiFields.add("file");
    openapiFields.add("labels");
    openapiFields.add("search_model");
    openapiFields.add("temperature");
    openapiFields.add("logprobs");
    openapiFields.add("max_examples");
    openapiFields.add("logit_bias");
    openapiFields.add("return_prompt");
    openapiFields.add("return_metadata");
    openapiFields.add("expand");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("query");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateClassificationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateClassificationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateClassificationRequest is not found in the empty JSON string", CreateClassificationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateClassificationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateClassificationRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateClassificationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if (!jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("examples") != null && !jsonObj.get("examples").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `examples` to be an array in the JSON string but got `%s`", jsonObj.get("examples").toString()));
      }
      if ((jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) && !jsonObj.get("file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("search_model") != null && !jsonObj.get("search_model").isJsonNull()) && !jsonObj.get("search_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_model").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("expand") != null && !jsonObj.get("expand").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `expand` to be an array in the JSON string but got `%s`", jsonObj.get("expand").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateClassificationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateClassificationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateClassificationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateClassificationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateClassificationRequest>() {
           @Override
           public void write(JsonWriter out, CreateClassificationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateClassificationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateClassificationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateClassificationRequest
  * @throws IOException if the JSON string is invalid with respect to CreateClassificationRequest
  */
  public static CreateClassificationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateClassificationRequest.class);
  }

 /**
  * Convert an instance of CreateClassificationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

